package dk.eazyit.eazyregnskab.web.components.input;

import org.apache.wicket.Component;
import org.apache.wicket.markup.head.IHeaderResponse;
import org.apache.wicket.markup.head.JavaScriptHeaderItem;
import org.apache.wicket.markup.html.form.AbstractCheckSelector;
import org.apache.wicket.markup.html.form.CheckBox;
import org.apache.wicket.markup.html.form.CheckBoxSelector;
import org.apache.wicket.request.resource.JavaScriptResourceReference;
import org.apache.wicket.request.resource.ResourceReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * @author
 */
public class CheckBoxListSelector extends AbstractCheckSelector {
    private static final long serialVersionUID = 1L;

    private static final Logger LOG = LoggerFactory.getLogger(CheckBoxListSelector.class);

    private final static ResourceReference JS = new JavaScriptResourceReference(
            CheckBoxSelector.class, "CheckBoxSelector.js");

    /**
     * Javascript array literal containing the markup IDs of the checkboxes we want to
     * check/uncheck. Example: "['foo', 'bar', 'baz']". Generated by
     * JavascriptUtils.buildMarkupIdJSArrayLiteral().
     */
    private final String checkBoxIdArrayLiteral;

    /**
     * @param id    The component ID
     * @param boxes The CheckBoxes this selector will control.
     */
    public CheckBoxListSelector(String id, List<CheckBox> list) {
        super(id);
        LOG.trace("creating " + this.getClass().getSimpleName() + " with id " + this.getId());
        setOutputMarkupId(true);
        checkBoxIdArrayLiteral = buildMarkupIdJSArrayLiteral(list);
    }

    @Override
    protected CharSequence getFindCheckboxesFunction() {
        return "Wicket.CheckboxSelector.Checkboxes.findCheckboxesFunction(" +
                checkBoxIdArrayLiteral + ")";
    }

    @Override
    public void renderHead(IHeaderResponse response) {
        super.renderHead(response);
        response.render(JavaScriptHeaderItem.forReference(JS));
    }


    /**
     * Builds a JavaScript array literal containing the markup IDs of the given components. Example:
     * "['foo', 'bar', 'baz']".
     *
     * @param components The components whose IDs we need
     * @return a properly formatted JS array literal
     */
    private String buildMarkupIdJSArrayLiteral(final Iterable<? extends Component> components) {
        StringBuilder buf = new StringBuilder();
        buf.append("[");
        if (components.iterator().hasNext()) {
            for (Component component : components) {
                component.setOutputMarkupId(true);
                buf.append("'").append(component.getMarkupId()).append("', ");
            }
            buf.delete(buf.length() - 2, buf.length());
        }
        buf.append("]");
        return buf.toString();
    }

}